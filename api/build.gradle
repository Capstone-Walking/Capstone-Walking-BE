apply from: '../tasks/docs-task.gradle'


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation project(':api-repository')
    implementation project(':member-api')
    implementation project(':batch')

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // webflux todo remove related dependencies
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.104.Final:osx-aarch_64'

    // swagger & restdocs
    implementation "org.springdoc:springdoc-openapi-ui:${springDocOpenApiUiVersion}"
    swaggerUI "org.webjars:swagger-ui:${swaggerUIVersion}"
    implementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation "com.epages:restdocs-api-spec-mockmvc:${epagesRestDocsApiSpecVersion}"

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //jwt
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"

    // jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: "${jsr305Version}"

    // todo remove related dependencies
    implementation 'org.json:json:20200518'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
}

def imageName = project.hasProperty('imageName') ? imageName : "api"
def releaseVersion = project.hasProperty('releaseVersion') ? releaseVersion : null

def repository = "walking/${imageName}"

// todo refactor can use under tasks
task buildDockerImage {
    dependsOn 'bootJar'
//    dependsOn 'copySwaggerUI'

    doLast {
        exec {
            workingDir '.'
            commandLine 'docker', 'build', '-t', "${imageName}", '--build-arg', "RELEASE_VERSION=${releaseVersion}", '.'
        }
    }
}

def moduleStaticPath = "/api/src/main/resources/static"
swaggerSources {
    sample {
        setInputFile(file(rootProject.rootDir.toString() + moduleStaticPath + "/openapi3.yaml"))
    }
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUI'
    def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()
    from("${generateSwaggerUISampleTask.outputDir}")
    into(rootProject.rootDir.toString() + moduleStaticPath + "/docs/swagger-ui")
}
